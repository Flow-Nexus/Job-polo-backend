// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  USER
  OPERATOR
}

enum AuthProvider {
  OTP
  GOOGLE
  ADMIN_CREATED
}

enum UserGender {
  MALE
  FEMALE
  TRANSGENDER
}


model User {
  id           String        @id @default(uuid())
  email        String        @unique
  username     String?
  name         String?
  countryCode  String?
  phone        String?       @unique
  altPhone     String?
  gender       UserGender?
  aadharNumber String?       @unique
  panNumber    String?       @unique
  cartId       String?       @unique
  dob          String?
  role         RoleType      @default(USER)
  imageUrls    String?
  previewUrls  String?
  authProvider AuthProvider? @default(OTP)
  is_active    Boolean       @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  resetPasswordTokens ResetPasswordToken[]
  UserOTPVerification UserOTPVerification?

  // Profile address (only one)
  profileAddressId String?      @unique
  // profileAddress   UserAddress? @relation("UserToProfileAddress", fields: [profileAddressId], references: [id])

  // deliveryAddresses  DeliveryAddress[]
  // submittedFeedbacks Feedback[]        @relation("SubmittedFeedbacks") // feedbacks submitted by user
  // receivedFeedbacks  Feedback[]        @relation("FeedbackToUser") // feedbacks about this user
}

model OTP {
  id     String @id @default(uuid())
  email  String
  otp    String
  action String

  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email])
}

model UserOTPVerification {
  id    String  @id @default(uuid())
  email String  @unique
  otp   String?

  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  expiresAt     DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, otp])
}

model ResetPasswordToken {
  id       String @id @default(uuid())
  email    String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email], onDelete: Cascade)
}