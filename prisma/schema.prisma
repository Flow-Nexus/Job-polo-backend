// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- Enums ----------------
enum RoleType {
  EMPLOYEE
  EMPLOYER
  SUPER_ADMIN
  ADMIN
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum AuthProvider {
  OTP
  GOOGLE
  FACEBOOK
  LINKEDIN
  ADMIN_CREATED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum JobMode {
  REMOTE
  ON_SITE
  HYBRID
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

// ---------------- User (Base Table) ----------------
model User {
  id                      String       @id @default(uuid())
  email                   String       @unique
  firstName               String
  lastName                String
  countryCode             String?
  mobileNumber            String?      @unique
  alternativeMobileNumber String?
  role                    RoleType     @default(EMPLOYEE)
  authProvider            AuthProvider @default(OTP)
  addressId               String?      @unique
  is_active               Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  // Address 
  address       Address?        @relation("address", fields: [addressId], references: [id])
  employee      Employee?
  employer      Employer?
  superAdmin    SuperAdmin?
  admin         Admin?
  notifications Notification[]
  messages      Message[]       @relation("UserMessages")
  sentMessages  Message[]       @relation("SentMessages")
  savedJobs     SavedJob[]      @relation("UserSavedJobs")
  viewedJobs    ViewedJob[]     @relation("UserViewedJobs")
  reviews       CompanyReview[]

  // Auth relations
  resetPasswordTokens ResetPasswordToken[]
  UserOTPVerification UserOTPVerification?
}

// ---------------- OTP & Verification ----------------
model OTP {
  id     String @id @default(uuid())
  email  String
  otp    String
  action String

  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email])
}

// ---------------- User OTP Verification ----------------
model UserOTPVerification {
  id             String  @id @default(uuid())
  userId         String  @unique
  otp            String?
  emailVerified  Boolean @default(false)
  mobileVerified Boolean @default(false)

  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, otp])
}

// ---------------- Reset Password Token ----------------
model ResetPasswordToken {
  id               String   @id @default(uuid())
  userId           String   @unique
  password         String
  previousPassword String[] @default([]) // Store 2 previous passwords

  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ---------------- Employee (Job Seeker) ----------------
model Employee {
  id                    String      @id @default(uuid())
  userId                String      @unique
  portfolioUrl          String?
  portfolioPreviewUrl   String?
  bio                   String?
  gender                UserGender?
  dob                   DateTime?
  skills                String[]
  experience            Int?
  industry              String?
  functionArea          String?
  currentCTC            Float?
  expectedCTC           Float?
  resumeUrls            String[]    @default([])
  resumePreviewUrls     String[]    @default([])
  workSampleUrls        String[]    @default([])
  workSamplePreviewUrls String[]    @default([])
  linkedinUrl           String?
  TCPolicy              Boolean?    @default(false)
  is_active             Boolean     @default(true)

  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User             @relation(fields: [userId], references: [id])
  applications JobApplication[]
  savedJobs    SavedJob[]
  viewedJobs   ViewedJob[]
}

// ---------------- Employer (Company / Recruiter) ----------------
model Employer {
  id                         String   @id @default(uuid())
  userId                     String   @unique
  companyName                String
  website                    String?
  industry                   String?
  functionArea               String?
  aboutOrganzation           String?
  organizationLogoUrl        String?
  organizationLogoPreviewUrl String?
  linkedinUrl                String?
  companySize                String?
  establishedYear            Int?
  annualRevenue              String?
  GSTDetails                 Json?
  TCPolicy                   Boolean? @default(false)
  is_active                  Boolean  @default(true)

  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id])
  jobs    Job[]
  reviews CompanyReview[]
}

// ---------------- Admin ----------------
model Admin {
  id     String @id @default(uuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id])
}

// ---------------- Super Admin ----------------
model SuperAdmin {
  id                  String      @id @default(uuid())
  userId              String      @unique
  gender              UserGender?
  dob                 DateTime?
  portfolioUrl        String?
  portfolioPreviewUrl String?
  linkedinUrl         String?
  TCPolicy            Boolean?    @default(false)
  is_active           Boolean     @default(true)

  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// ---------------- Address ----------------
model Address {
  id             String  @id @default(uuid())
  city           String
  state          String
  country        String
  pincode        String
  latitude       Float?
  longitude      Float?
  building       String?
  floor          String?
  apartment      String?
  landmark       String?
  additionalInfo String?
  jobId          String?
  is_active      Boolean @default(true)

  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation("address")
  job  Job?  @relation("JobAddresses", fields: [jobId], references: [id])
}

// ---------------- Job Posting ----------------
model Job {
  id               String          @id @default(uuid())
  title            String
  description      String
  requirements     String
  responsibilities String
  education        String?
  experienceRange  String?
  salaryRange      String?
  mode             JobMode?
  employmentType   EmploymentType?
  skillsRequired   String[]
  openings         Int?            @default(1)
  deadline         DateTime?
  logoUrl          String
  logoPreviewUrl   String
  employerId       String
  jobPostAddressId String[]        @default([])
  is_active        Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  employer Employer @relation(fields: [employerId], references: [id])

  applications     JobApplication[]
  savedBy          SavedJob[]
  viewedBy         ViewedJob[]
  jobPostAddresses Address[]        @relation("JobAddresses")
}

// ---------------- Job Applications ----------------
model JobApplication {
  id          String            @id @default(uuid())
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  is_active   Boolean           @default(true)
  jobId       String
  employeeId  String

  appliedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  appliedBy String?
  updatedBy String?

  job      Job      @relation(fields: [jobId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])
}

// ---------------- Saved Jobs ----------------
model SavedJob {
  id         String  @id @default(uuid())
  userId     String
  jobId      String
  employeeId String
  is_active  Boolean @default(true)

  createdAt DateTime @default(now())
  savedBy   String?

  job      Job      @relation(fields: [jobId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation("UserSavedJobs", fields: [userId], references: [id])
}

// ---------------- Viewed Jobs ----------------
model ViewedJob {
  id         String  @id @default(uuid())
  userId     String
  jobId      String
  employeeId String
  is_active  Boolean @default(true)

  viewedAt DateTime @default(now())
  viewedBy String?

  job      Job      @relation(fields: [jobId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation("UserViewedJobs", fields: [userId], references: [id])
}

// ---------------- Company Reviews ----------------
model CompanyReview {
  id          String  @id @default(uuid())
  rating      Int // 1â€“5 stars
  title       String?
  description String?
  pros        String?
  cons        String?
  employerId  String
  userId      String
  is_active   Boolean @default(true)

  reviewDate DateTime @default(now())
  isApproved Boolean  @default(false)
  reviedBy   String?
  approvedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employer Employer @relation(fields: [employerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

// ---------------- Notifications ----------------
model Notification {
  id        String    @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean   @default(false)
  type      String?
  readAt    DateTime?
  is_active Boolean   @default(true)

  createdAt DateTime @default(now())
  createdBy String?
  updatedBy String?
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// ---------------- Messaging ----------------
model Message {
  id         String  @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  isRead     Boolean @default(false)
  is_active  Boolean @default(true)

  sentAt DateTime  @default(now())
  readAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("UserMessages", fields: [receiverId], references: [id])
}
